From 3ee9e1563c3fc72242a3cfa5124d850682e1e3da Mon Sep 17 00:00:00 2001
From: mzz2017 <mzz@tuta.io>
Date: Sat, 7 Aug 2021 14:14:53 +0800
Subject: [PATCH] feat: embed web files

---
 .travis.yml                         |  7 ++-
 install/aur/deploy_v2raya_bin.sh    |  2 -
 install/aur/v2raya-bin/.SRCINFO     |  2 -
 install/aur/v2raya-bin/PKGBUILD     |  5 --
 install/aur/v2raya/PKGBUILD         |  2 -
 service/.gitignore                  |  3 +-
 service/global/environmentConfig.go |  2 +-
 service/server/router/index.go      | 86 ++++++++++++++++++++++++-----
 8 files changed, 78 insertions(+), 31 deletions(-)

--- a/global/environmentConfig.go
+++ b/global/environmentConfig.go
@@ -15,7 +15,7 @@ type Params struct {
 	Config               string `id:"config" short:"c" default:"/etc/v2raya" desc:"v2rayA configuration directory"`
 	V2rayBin             string `id:"v2ray-bin" desc:"Executable v2ray binary path. Auto-detect if put it empty."`
 	V2rayConfigDirectory string `id:"v2ray-confdir" desc:"Additional v2ray config directory, files in it will be combined with config generated by v2rayA"`
-	WebDir               string `id:"webdir" default:"/etc/v2raya/web" desc:"v2rayA web files directory"`
+	WebDir               string `id:"webdir" desc:"v2rayA web files directory. use embedded files if not specify."`
 	Mode                 string `id:"mode" short:"m" desc:"(deprecated) Options: systemctl, service, universal. Auto-detect if not set"`
 	PluginListenPort     int    `short:"s" default:"32346" desc:"ssr, pingTunnel, etc."`
 	ForceIPV6On          bool   `id:"force_ipv6_on" desc:"force open ipv6"`
--- a/server/router/index.go
+++ b/server/router/index.go
@@ -1,6 +1,7 @@
 package router
 
 import (
+	"embed"
 	"github.com/gin-contrib/cors"
 	"github.com/gin-gonic/gin"
 	"github.com/gookit/color"
@@ -9,6 +10,8 @@ import (
 	"github.com/v2rayA/v2rayA/db/configure"
 	"github.com/v2rayA/v2rayA/global"
 	"github.com/v2rayA/v2rayA/server/controller"
+	"io"
+	"io/fs"
 	"log"
 	"net"
 	"net/http"
@@ -17,32 +20,85 @@ import (
 	"path/filepath"
 )
 
+//go:embed web
+var webRoot embed.FS
+
+// relativeFS implements fs.FS
+type relativeFS struct {
+	root        fs.FS
+	relativeDir string
+}
+
+func (c relativeFS) Open(name string) (fs.File, error) {
+	return c.root.Open(path.Join(c.relativeDir, name))
+}
+
 func ServeGUI(engine *gin.Engine) {
-	defer func() {
-		if msg := recover(); msg != nil {
-			log.Println("[ERROR]", msg)
-		}
-	}()
+	//defer func() {
+	//	if msg := recover(); msg != nil {
+	//		log.Println("[ERROR]", msg)
+	//	}
+	//}()
 	webDir := global.GetEnvironmentConfig().WebDir
-	if _, err := os.Stat(webDir); os.IsNotExist(err) {
-		log.Printf("[Warning] web files cannot be found at %v. web UI cannot be served", webDir)
-	} else {
-		filepath.Walk(webDir, func(path string, info os.FileInfo, err error) error {
-			if path == webDir {
+	if webDir == "" {
+		webFS := relativeFS{
+			root:        webRoot,
+			relativeDir: "web",
+		}
+		fs.WalkDir(webFS, "/", func(path string, info fs.DirEntry, err error) error {
+			if path == "/" {
 				return nil
 			}
 			if info.IsDir() {
-				engine.Static("/"+info.Name(), path)
+				engine.StaticFS("/"+info.Name(), http.FS(relativeFS{
+					root:        webFS,
+					relativeDir: path,
+				}))
 				return filepath.SkipDir
 			}
-			engine.StaticFile("/"+info.Name(), path)
+			engine.GET("/"+info.Name(), func(ctx *gin.Context) {
+				ctx.FileFromFS(path, http.FS(webFS))
+			})
 			return nil
 		})
-		engine.LoadHTMLFiles(path.Join(webDir, "index.html"))
-		engine.GET("/", func(context *gin.Context) {
-			context.HTML(http.StatusOK, "index.html", nil)
+		//engine.LoadHTMLFiles(path.Join(webDir, "index.html"))
+		engine.GET("/", func(ctx *gin.Context) {
+			f, err := webFS.Open("index.html")
+			if err != nil {
+				ctx.Status(400)
+				return
+			}
+			defer f.Close()
+			b, err := io.ReadAll(f)
+			if err != nil {
+				ctx.Status(400)
+				return
+			}
+			ctx.Header("Content-Type", "text/html; charset=utf-8")
+			ctx.String(http.StatusOK, string(b))
 		})
 	}
+	if webDir != "" {
+		if _, err := os.Stat(webDir); os.IsNotExist(err) {
+			log.Printf("[Warning] web files cannot be found at %v. web UI cannot be served", webDir)
+		} else {
+			filepath.Walk(webDir, func(path string, info os.FileInfo, err error) error {
+				if path == webDir {
+					return nil
+				}
+				if info.IsDir() {
+					engine.Static("/"+info.Name(), path)
+					return filepath.SkipDir
+				}
+				engine.StaticFile("/"+info.Name(), path)
+				return nil
+			})
+			engine.LoadHTMLFiles(path.Join(webDir, "index.html"))
+			engine.GET("/", func(context *gin.Context) {
+				context.HTML(http.StatusOK, "index.html", nil)
+			})
+		}
+	}
 
 	app := global.GetEnvironmentConfig()
 
